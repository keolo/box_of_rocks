#!/usr/bin/env ruby

# Heartbeat
# This script checks to see if urls successfully respond or redirect.
# If they don't an email is sent to recipents.

require 'openssl'
require 'net/smtp'
require 'net/http'
require 'net/https'
require 'uri'

# Config
config = {
  :address     => 'smtp.gmail.com',
  :port        =>  587,
  :domain      => 'example.com',
  :auth        => :plain,
  :user_name   => 'user@example.com',
  :password    => 'abc123',
  :from        => 'user@example.com',
  :recipents   =>  %w(someone@example.com)
}

urls = %w(
  http://example.com/
  http://example.com/pages
  http://example.com/search?q=heartbeat
)

errors = []

urls.each do |url|
  begin
    uri = URI.parse(url)
    http = Net::HTTP.new(uri.host, uri.scheme == 'https' ? 443 : nil)
    http.use_ssl = (uri.scheme == 'https')
    http.start do |http|
      request = Net::HTTP::Get.new(uri.request_uri)
      response = http.request(request)
      case response
      when Net::HTTPSuccess, Net::HTTPRedirection
      else
        raise "Requesting #{uri} returned code #{response.code}"
      end
    end
  rescue
    error = "#{url}: #{$!}"
    errors << error
    puts error
  end
end

unless errors.empty?
  msg = "From: #{config[:from]}\n"
  msg += "Subject: Site is down!\n\n"
  msg += errors.join("\n\n")
  puts "Sending email to #{config[:recipents].join(', ')}"

  smtp = Net::SMTP.new(config[:address], config[:port])
  smtp.enable_starttls_auto

  smtp.start(config[:domain], config[:user_name], config[:password], config[:auth]) do |smtp|
    smtp.send_message(msg, config[:from], config[:recipents])
  end
end
